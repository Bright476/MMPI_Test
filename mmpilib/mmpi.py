# -*- coding:utf-8 -*-

# 版权所有 (C) 2018.6.25 金盛羽。保留所有权利。
# Copyright 2018.6.25 Shengyu Jin. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
本模块主用于处理和MMPI测试相关的函数功能，其中包含一份完整的MMPI测试问卷
This module is mainly for processing functions about MMPI, including
a complete questionnaire.
"""

import time
import matplotlib.pyplot as plt
from openpyxl import Workbook
#from openpyxl.compat import range #comment because of not use
from openpyxl.styles import Font, Alignment

# for debug
from random import randint

#通过修改FORMAT_INPUT的值(0或1)可以做到是否手动填写，text_input则为题目，通过修改为(1或0)来选择是或否
#format input
FORMAT_INPUT = 1
text_input = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, #60
              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, #120
              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, #180
              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, #240
              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, #300
              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, #360
              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, #420
              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, #480
              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, #540
              0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] #600

# 指导语
# Instruction
Ins1 = """-----------------------------------------------------------------
                       明尼苏达多项人格测验                      
       Minnesota Multiphasic Per-sonality Inventory (MMPI)       
-----------------------------------------------------------------
简要介绍：明尼苏达多项人格测验（MMPI）是由明尼苏达大学教授哈瑟韦
（S．R．Hathaway）和麦金力（J．C．Mckinley）于1942年制定的，它可以用
于测试正常人的人格类型，也可以用于区分正常人和心理或精神疾病患者。上世
纪末，在纪术茂先生等人多年研究和实践调查的基础上，形成了适用于中国本土
的MMPI测验问卷和常模，从1980年我国即开始试用MMPI，近年来使用更为广泛，
结果证明此测验在我国使用具有一定的信度与效度，有较高的临床参考价值。
-----------------------------------------------------------------
重要提醒：本测验属于专业心理测量手段具有临床参考意义，须在相关专业人士
指导下进行使用和解读，个人请慎用！                                 
-----------------------------------------------------------------"""

Ins2 = """-----------------------------------------------------------------
指导语：本测验由许多与你有关的问题所组成，当你阅读每一个题目时，请考虑
是否符合你现在的行为、感情、态度或意见。如果情况符合请输入“1”，否则输
入“0”，并在确认后敲击“回车”键以完成本题的作答。请尽快填写你读完题目后
的第一印象，不要在每一道题上花费太多时间思考。个性各有不同，答案是无所
谓对与不对，好与不好的，完全不必有任何顾虑，请按照你的实际情况作答即可。
-----------------------------------------------------------------
答题样例：
x. 我的性别是
1. 男    0. 女
> 1
-----------------------------------------------------------------"""


# 566项MMPI问卷中的问题
# 566 questions of MMPI questionnaire
Que = {
    1: '我喜欢看科技方面的新闻',
    2: '我的胃口很好',
    3: '我早上起来的时候，多半觉得睡眠充足，头脑清醒',
    4: '我想我会喜欢图书管理员的工作',
    5: '我睡觉时很容易被吵醒',
    6: '我喜欢看与犯罪有关的新闻',
    7: '我的手脚经常是很暖和的',
    8: '我的日常生活中，充满了使我感兴趣的事情',
    9: '我现在工作（学习）的能力，和从前差不多',
    10: '我的喉咙里总好像有一块东西堵着似的',
    11: '一个人应该去了解自己的梦，并从中得到指导或警告',
    12: '我喜欢看侦探小说或神秘小说',
    13: '我总是在很紧张的情况下工作',
    14: '我每个月至少有一、二次拉肚子',
    15: '偶尔我会想到一些坏得说不出口的事',
    16: '我深信生活对我是不公平的',
    17: '我的父亲是一个好人',
    18: '我很少有便秘的毛病',
    19: '当我找到一件新的工作时，总喜欢别人秘密告诉我，我应该接近谁',
    20: '我的性生活是满意的',
    21: '有时我非常想离开家',
    22: '有时我会哭一阵笑一阵，连自己也不能控制',
    23: '恶心和呕吐的毛病使我苦恼',
    24: '似乎没有一个人理解我',
    25: '我想我会喜欢当一名歌唱家',
    26: '当我处境困难的时候，我觉得最好是不开口',
    27: '有时我觉得有鬼神附在我身上',
    28: '当别人惹了我时，我觉得只要有机会就应报复，这是理所当然的',
    29: '我有胃酸过多的毛病，一星期要犯好几次',
    30: '有时我真想骂人',
    31: '每隔几个晚上我就做噩梦',
    32: '我发现我很难把注意力集中到一件工作上',
    33: '我曾经有过很特别、很奇怪的体验',
    34: '我时常咳嗽',
    35: '假如不是有人和我作对，我一定会有更大的成就',
    36: '我很少担心自己的健康',
    37: '我从来没有因我的性方面的行为而遇到麻烦',
    38: '我小的时候，有一段时间我干过小偷小摸的事',
    39: '有时我真想摔东西',
    40: '有很多时候我宁愿坐着空想，而不愿做任何事情',
    41: '我曾一连几天、几个星期、几个月什么也不想干，因为我总是提不起精神',
    42: '我家里人不喜欢我选择的工作（或将要选择的职业）',
    43: '我睡得不安稳，容易被惊醒',
    44: '我常觉得我的头到处都疼',
    45: '有时我也讲假话',
    46: '我现在的判断力比以往任何时候都好',
    47: '每星期至少有一、二次，我突然觉得无缘无故地全身发热',
    48: '当我与人相处的时候，听到别人谈论稀奇古怪的事，我就心烦',
    49: '最好是把所有的法律全都废除',
    50: '有时我觉得我的灵魂离开了我的身体',
    51: '我的身体和我的大多数朋友一样健康',
    52: '遇到同学或不常见的朋友，除非他们先向我打招呼，不然我就装作没看见',
    53: '一位牧师（和尚、道士、神父、阿訇等教士）能用祈祷和把手放在病人头上来治病',
    54: '认识我的人差不多都喜欢我',
    55: '我从来没有因为胸痛或心痛而感到苦恼',
    56: '我小时候，曾经因为胡闹而受过学校的处分',
    57: '我和别人一见面就熟了，或者说我是自来熟的性格',
    58: '一切事情都由老天爷或命运安排好了',
    59: '我时常得听从某些人的指挥，其实他们还不如我高明',
    60: '我不是每天都看报纸上的每一篇社论',
    61: '我从未有过正常的生活',
    62: '我身体的某些部分常有像火烧、刺痛、虫爬或麻木的感觉',
    63: '我的大便不难控制',
    64: '有时我会不停地做一件事，直到别人都感到厌烦',
    65: '我爱我的父亲',
    66: '我能在我周围看到其他人所看不到的东西、动物或人',
    67: '我希望我能像别人那样快乐',
    68: '我几乎从未感到过脖子（颈部）后面疼痛',
    69: '同性别的人对我有很强的吸引力',
    70: '我过去曾喜欢玩“丢手帕”之类的游戏',
    71: '我觉得许多人为了得到别人的同情和帮助，而喜欢夸大自己的不幸',
    72: '我为每隔几天或经常感到心口（胃）不舒服而烦恼',
    73: '我是个重要的人物',
    74: 'm我总希望我是个女人f我从不因为我是女人而遗憾',
    75: '我有时发怒',
    76: '我时常感到悲观失望',
    77: '我喜欢看爱情小说',
    78: '我喜欢诗',
    79: '我的感情不易受伤害',
    80: '我有时捉弄动物',
    81: '我想我会喜欢干森林管理员那一类的工作',
    82: '和人争辩的时候，我常争不过别人',
    83: '凡是有能力而且愿意吃苦的人都会有很好的成功机会',
    84: '现在，我发现自己很容易自暴自弃',
    85: '有时我被别人的东西，如鞋、手套等等所强烈吸引，虽然这些东西对我毫无用处，但我总想摸摸它或把它偷来',
    86: '我确实缺少自信心',
    87: '我愿意做一名花匠',
    88: '我总觉得人生是有价值的',
    89: '要使大多数人相信事实的真相，是要经过一番辩论的',
    90: '有时我将本该今天做的事，拖到明天去做',
    91: '我不在乎别人拿我开玩笑',
    92: '我想当个护士',
    93: '我觉得大多数人是为了向上爬而不惜说谎的',
    94: '许多事情，我做过以后就后悔了',
    95: '我几乎每星期都去教堂（或常去寺庙之类的宗教场所）',
    96: '我很少和家人争吵',
    97: '有时我有一种强烈的冲动，想去做一些惊人或有害的事',
    98: '我相信善有善报，恶有恶报',
    99: '我喜欢参加热闹的聚会',
    100: '我曾碰到一些千头万绪的问题，使我感到犹豫不决',
    101: '我认为女性在性生活方面，应该和男性有同等的自由',
    102: '我认为最难的是控制我自己',
    103: '我很少有肌肉抽筋或颤抖的毛病',
    104: '我似乎对什么事情有都不在乎',
    105: '我身体不舒服的时候，有时会发脾气',
    106: '我总觉得我自己好像做错了什么事或犯了什么罪',
    107: '我经常是快乐的',
    108: '我时常觉得头胀鼻塞似的',
    109: '有些人太霸道，即使我明知他们是对的，也要和他们对着干',
    110: '有人想害我',
    111: '我从来没有为寻求刺激而去做危险的事',
    112: '我时常认为必须坚持那些我认为正确的事',
    113: '我相信法制',
    114: '我常觉得头上好像有一根绷得紧紧的带子',
    115: '我相信人死后还会有“来世”',
    116: '我更喜欢我下了赌的比赛或游戏',
    117: '大部分人之所以是诚实的，主要是因为怕被别人识破',
    118: '我在上学的时候，有时因胡闹而被教导主任或者校长叫去',
    119: '我说话总是那样不快也不慢，不含糊也不嘶哑',
    120: '我在外边和朋友们一起吃饭的时候，比在家规矩得多',
    121: '我相信有人暗算我',
    122: '我似乎和我周围的人一样精明能干',
    123: '我相信有人跟踪我',
    124: '大多数人不惜用不正当的手段谋取利益，而不愿失掉机会',
    125: '我的胃有很多毛病',
    126: '我喜欢戏剧或歌舞剧',
    127: '我知道我的烦恼是谁造成的',
    128: '看到血的时候，我既不害怕也不难受',
    129: '我自己往往弄不清为什么会这样爱生气或发牢骚',
    130: '我从来没有吐过血，或咯过血',
    131: '我不为得病而担心',
    132: '我喜欢栽花或采集花草',
    133: '我从来没有放纵自己发生过任何不正常的性行为',
    134: '有时我的思想跑得太快都来不及表达出来',
    135: '假如我能不买票，白看电影，而且不会被人发觉，我可能会去这样干的',
    136: '如果别人待我好，我常常怀疑他们别有用心',
    137: '我相信我的家庭生活，和我所认识的许多人一样幸福快乐',
    138: '批评和责骂都使我非常伤心',
    139: '有时我仿佛觉得我必须伤害自己或别人',
    140: '我喜欢做饭烧菜',
    141: '我的行为多半受我周围人的习惯所支配',
    142: '有时我觉得我真是毫无用处',
    143: '小时候我曾加入过一个团伙，有福共享，有难同当',
    144: '我喜欢当兵',
    145: '有时我想借故和别人打架',
    146: '我喜欢到处乱逛，如果不让我这么做，我会不高兴',
    147: '由于我经常不能当机立断，因而失去过许多良机',
    148: '当我正在做一件重要事情的时候，如果有人向我请教或打扰我，我会不耐烦的',
    149: '我以前写过日记',
    150: '玩游戏的时候，我只想赢而不愿输',
    151: '有人一直想毒害我',
    152: '大多数晚上我睡觉时，不受什么思想干扰',
    153: '近几年来大部分时间，我的身体都很好',
    154: '我从来没有过抽风的毛病',
    155: '现在我的体重既没有增加也没有减轻',
    156: '有一段时间，我自己做过的事情全不记得了',
    157: '我觉得我时常无缘无故地受到惩罚',
    158: '我容易哭',
    159: '我不能象从前那样理解我所读的东西了',
    160: '在我一生中，我从来没有感觉到像现在这么好',
    161: '有时候我觉得我的头顶一碰就疼',
    162: '我痛恨别人以不正当的手段捉弄我，使我不得不认输',
    163: '我不容易感到疲倦',
    164: '我喜欢研究和阅读与我目前工作有关的东西',
    165: '我喜欢结识一些重要人物，这样会使我感到自己也很重要',
    166: '我很害怕从高处往下看',
    167: '即使我家里有人犯法，我也不会紧张',
    168: '我的脑子有点毛病',
    169: '我不怕管理钱财',
    170: '我不在乎别人对我有什么看法',
    171: '在聚会当中，尽管有人出风头，如果让我也这样做，我会感到很不舒服',
    172: '我时常需要努力使自己不显出怕羞的样子',
    173: '我过去喜欢上学',
    174: '我从来没有晕倒过',
    175: '我很少头昏眼花',
    176: '我不大怕蛇',
    177: '我母亲是个好人',
    178: '我的记忆力似乎还不错',
    179: '有关性方面的问题使我烦恼',
    180: '我觉得我遇到生人的时候就不知道说什么好了',
    181: '无聊的时候，我就会惹事寻开心',
    182: '我怕自己会发疯',
    183: '我反对把钱给乞丐',
    184: '我时常听到说话的声音，而又不知道它是从哪里来的',
    185: '我的听觉显然和大多数人一样好',
    186: '当我要做一件事的时候，我常发现我的手在发抖',
    187: '我的双手并没有变得笨拙不灵',
    188: '我能阅读很长的时间，而眼睛不觉得累',
    189: '许多时候，我觉得浑身无力',
    190: '我很少头痛',
    191: '有时当我难为情的时候会出很多汗，这使我非常苦恼',
    192: '我从未感到走路时不能保持平衡',
    193: '我没哮喘这一类疾病',
    194: '我曾有过几次突然不能控制自己的行动或言语，但当时我的头脑还很清醒',
    195: '我所认识的人里，不是个个我都喜欢',
    196: '我喜欢到我从来没有到过的地方去游览',
    197: '有人一直想抢我的东西',
    198: '我很少空想',
    199: '我们应该把有关性方面的主要知识告诉孩子',
    200: '有人想窃取我的思想和计划',
    201: '但愿我不像现在这样的害羞',
    202: '我相信我是一个受谴责的人',
    203: '假若我是一个新闻记者，我会更喜欢报道娱乐圈的新闻',
    204: '我喜欢做一个新闻记者',
    205: '有时我会控制不住想要偷一点东西',
    206: '我相信神，程度超过了大多数人',
    207: '我喜欢许多不同种类的游戏或娱乐',
    208: '我喜欢和异性说笑',
    209: '我相信我的罪恶是不可饶恕的',
    210: '每种东西吃起来味道都是一样的',
    211: '我白天能睡觉，晚上却睡不着',
    212: '我家里的人把我当作小孩子，而不当作大人看待',
    213: '走路时，我会很小心地跨过人行道上的接缝',
    214: '我从来没有为皮肤上长点东西而烦恼',
    215: '我曾经饮酒过度',
    216: '和别人的家庭比较，我的家庭缺乏爱和温暖',
    217: '我时常感到自己在为某些事而担忧',
    218: '当我看到动物受折磨的时候，我并不觉得特别难受',
    219: '我想我会喜欢建筑承包的工作',
    220: '我爱我的母亲',
    221: '我喜欢科学',
    222: '即使我以后不能报答恩惠，我也愿向朋友求助',
    223: '我很喜欢打猎',
    224: '我父母经常反对那些和我交往的人',
    225: '有时我也会说说人家的闲话',
    226: '我家里有些人的习惯，使我非常讨厌',
    227: '有人告诉过我，我在睡觉中会起来梦游',
    228: '有时我觉得我能非常容易地做出决定',
    229: '我喜欢同时参加几个团体',
    230: '我从来没有感到心慌气短',
    231: '我喜欢谈论两性方面的事',
    232: '我曾经立志要过一种以责任为重的生活，我一直照此谨慎从事',
    233: '我有时阻止别人做某些事，并不是因为那种事有多大影响，而是在“道义”上我应该干预他',
    234: '我很容易生气，但很快就能平静下来',
    235: '我已独立自主，不受家庭的约束',
    236: '我有很多心事',
    237: '我的亲属几乎全都同情我',
    238: '有时我十分烦躁，坐立不安',
    239: '我曾经失恋过',
    240: '我从来不为我的外貌而伤脑筋',
    241: '我常梦到一些不可告人的事',
    242: '我相信我并不比别人更为神经过敏',
    243: '我几乎没有什么地方有疼痛的毛病',
    244: '我的做事方法容易被人误解',
    245: '我的父母和家里人对我过于挑剔',
    246: '我脖子（颈部）上时常出现红斑',
    247: '我有理由妒忌我家里的某些人',
    248: '我有时无缘无故地，甚至在不顺利的时候也会觉得非常快乐',
    249: '我相信死后的世界有魔鬼和地狱',
    250: '有人想把世界上所能得到的东西都夺到手，我也不会责怪他',
    251: '我曾经有一阵突然发呆（发愣）停止活动，不知道周围发生了什么事情',
    252: '谁也不会关心他人的遭遇',
    253: '有些人所做的事，虽然我认为是错的，但我仍然能够友好地对待他们',
    254: '我喜欢和一些能互相开玩笑的人在一起相处',
    255: '在选举的时候，有时我会选出我不熟悉的人',
    256: '报纸上只有“漫画”最有趣',
    257: '凡是我所做的事，我都指望能够成功',
    258: '我相信有上帝（神）',
    259: '做什么事情，我都感到难以开头',
    260: '在学校里，我是个笨学生',
    261: '如果我是个画家，我会更喜欢画花',
    262: '我虽然相貌不好看，也不因此而苦恼',
    263: '即使在冷天，我也很容易出汗。',
    264: '我十分自信',
    265: '对任何人都不信任，是比较安全的',
    266: '每星期至少有一两次我十分兴奋',
    267: '人多的时候，我不知道说些什么话好',
    268: '在我心情不好的时候，总会有一些事使我高兴起来',
    269: '我能很容易使人怕我，有时我故意这样作来寻开心',
    270: '我离家外出的时候，从来不担心家里门窗是否关好或锁好了',
    271: '我不会责怪一个欺负了自找没趣者的人',
    272: '我有时精力充沛。',
    273: '我的皮肤上有一两处麻木了',
    274: '我的视力和往年一样好',
    275: '有人控制着我的思想',
    276: '我喜欢小孩子',
    277: '有时我非常欣赏骗子的机智，我甚至希望他能侥幸混过去',
    278: '我时常觉得有些陌生人用挑剔的眼光盯着我',
    279: '我每天喝特别多的水',
    280: '大多数人交朋友，是因为朋友对他们有用',
    281: '我觉得我很少耳鸣',
    282: '通常我爱家里的人，偶尔也恨他们',
    283: '假如我是一个新闻记者，我会更愿意报道体育新闻',
    284: '我确信别人正在议论我',
    285: '偶尔我听了下流的笑话也会发笑',
    286: '我独自一个人的时候，感到更快乐',
    287: '使我害怕的事比我的朋友们少得多',
    288: '恶心和呕吐的毛病使我苦恼',
    289: '当一个罪犯可以通过能言善辩的律师开脱罪责时，我对法律感到厌恶',
    290: '我总是在很紧张的情况下工作的',
    291: '在我这一生中，至少有一两次我觉得有人用催眠术指挥我做了一些事',
    292: '我一般不愿意同人讲话，除非对方先开口',
    293: '有人一直想要左右我的思想',
    294: '我从来没有犯过法',
    295: '我喜欢看《红楼梦》这一类的小说',
    296: '有些时候，我会无缘无故地觉得非常愉快',
    297: '我希望我不再受那种和性方面有关的念头所困扰',
    298: '假若有几个人闯了祸，他们最好先编一套假话，而且不改口',
    299: '我认为我比大多数人更容易动感情',
    300: '在我的一生当中，从来没有喜欢过洋娃娃',
    301: '许多时候，生活对我来说是一件吃力的事',
    302: '我从来没有因我的性方面的行为而遇到麻烦',
    303: '对于某些事情我很敏感，以至使我不能提及',
    304: '在学校里，要我在班上发言，是非常困难的',
    305: '即使和人们在一起，我还是经常感到孤单',
    306: '应得的同情，我全得到了',
    307: '我拒绝玩那些我玩不好的游戏',
    308: '有时我非常想离开家',
    309: '我交朋友差不多和别人一样容易',
    310: '我的性生活是满意的',
    311: '我小的时候，有一段时间我干过小偷小摸的事',
    312: '我不喜欢有人在我的身旁',
    313: '有人不将自己的贵重物品保管好因而引起别人偷窃，这种人和小偷一样应受责备',
    314: '偶尔我会想到一些坏得说不出口的事',
    315: '我深信生活对我是不公平的',
    316: '我想差不多每个人，都会为了避免麻烦说点假话',
    317: '我比大多数人更敏感',
    318: '在我的日常生活中，充满着使我感兴趣的事情',
    319: '大多数人，都是内心不愿意挺身而出去帮助别人的',
    320: '我的梦有好些是关于性方面的事',
    321: '我很容易感到难为情',
    322: '我为金钱和事业忧虑',
    323: '我曾经有过很特殊很奇怪的体验',
    324: '我从来没有爱上过任何人',
    325: '我家里有些人所做的事，使我吃惊',
    326: '有时我会哭一阵，笑一阵，连自己也不能控制',
    327: '我的母亲或父亲时常要我服从他，即使我认为是不合理的',
    328: '我发现我很难把注意力集中到一件工作上',
    329: '我几乎从不做梦',
    330: '我从来没有瘫痪过，或是感到肌肉非常软弱无力',
    331: '假如不是有人和我作对，我一定会有更大的成就',
    332: '即使我没有感冒，我有时也会发不出声音或声音改变',
    333: '似乎没有人理解我',
    334: '有时我会闻到奇怪的气味',
    335: '我不能专心于一件事情上',
    336: '我很容易对人感到不耐烦',
    337: '我几乎整天都在为某件事或某个人而焦虑',
    338: '我所操心的事，远远超过了我所应该操心的范围',
    339: '大部分时间，我觉得我还是死了的好',
    340: '有时我会兴奋得难以入睡',
    341: '有时我的听觉太灵敏了，反而使我感到烦恼',
    342: '别人对我说的话，我立刻就忘记了',
    343: '哪怕是琐碎的小事，我也会再三考虑后才去做',
    344: '有时为了避免和某些人相遇，我会绕道而行',
    345: '我常常觉得好像一切都不是真的',
    346: '我有一个习惯，喜欢点数一些不重要的东西，像路上的电线杆等等',
    347: '我没有真正想伤害我的仇人',
    348: '我提防那些对我过分亲近的人',
    349: '我有一些奇怪和特别的念头',
    350: '在我独处的时候，我会听到奇怪的声音',
    351: '当我必须短期离家出门的时候，我会感到心神不定',
    352: '我怕一些东西或人，虽然我明知他们是不会伤害我的',
    353: '如果屋子里已经有人聚在一起谈话，这时要我一个人进去，我是一点也不害怕的',
    354: '我害怕使用刀子或任何尖利的东西',
    355: '有时我喜欢折磨我所爱的人',
    356: '我似乎比别人更难于集中注意力',
    357: '有好几次我放弃正在做的事，因为我感到自己的能力太差了',
    358: '我脑子里常常出现一些坏的可怕的字眼，我却无法摆脱它们',
    359: '有时一些无关紧要的念头缠着我，使我好多天都感到不安',
    360: '几乎每天都有使我感到害怕的事情发生',
    361: '我总是将事情看得严重些',
    362: '我比大多数人更敏感。',
    363: '有时我喜欢受到我心爱的人的折磨',
    364: '有人用侮辱性的和下流的话议论我',
    365: '我呆在屋里总感到不安',
    366: '即使和人们在一起，我仍经常感到孤单',
    367: '我并不是特别害羞拘谨',
    368: '有时我的头脑似乎比平时迟钝',
    369: '在社交场合，我多半是一个人坐着，或者只跟另一个人坐在一起，而不到人群里去',
    370: '人们常使我失望',
    371: '我喜欢参加舞会',
    372: '有时我感到困难重重，无法克服',
    373: '我常想：“我要是能再成为一个孩子就好了”',
    374: '如果给我机会，我一定能做些对世界大有益处的事',
    375: '我时常遇见一些所谓的专家，他们并不比我高明',
    376: '当我听说我所熟悉的人成功了，我就觉得自己失败了',
    377: '如果有机会，我一定能成为一个人民的好领袖',
    378: '下流的故事使我感到不好意思',
    379: '一般来说人们要求别人尊重自己比较多，而自己却很少尊重别人',
    380: '我总想把好的故事记住，讲给别人听',
    381: '我喜欢搞输赢不大的赌博',
    382: '为了可以和人们在一起，我喜欢社交活动。',
    383: '我喜欢人多热闹的场合',
    384: '当我和一群快活的朋友在一起的时候，我的烦恼就烟消云散了',
    385: '当人们说我同伙的闲话时，我从来不参与',
    386: '只要我开始做一件事，就很难放下，哪怕是暂时的',
    387: '我的小便不困难，也不难控制',
    388: '我常发现别人妒忌我的好主意，因为他们没能先想到',
    389: '只要有可能，我就会避开人群',
    390: '我不怕见生人',
    391: '记得我曾经为了逃避某件事而装过病',
    392: '在火车和公共汽车上，我常跟陌生人交谈',
    393: '当事情不顺利的时候，我就想立即放弃。',
    394: '我喜欢让人家知道我对于事物的态度',
    395: '有些时间，我感到劲头十足，以至一连好几天都不需要睡觉',
    396: '在人群中，如果叫我带头发言，或对我所熟悉的事情发表意见，我并不感到不好意思',
    397: '我喜欢聚会和社交活动',
    398: '面对困难或危险的时候，我总退缩不前',
    399: '我原来想做的事，假若别人认为不值得做，我很容易放弃',
    400: '我不怕火',
    401: '我不怕水',
    402: '对某些事我常常是仔细考虑后才做出决定',
    403: '生活在这个丰富多彩的时代里是多么美好',
    404: '当我想纠正别人的错误和帮助他们的时候，我的好意常被误解',
    405: '我无吞咽困难',
    406: '我有时回避见人，因为我怕我会做出或讲出一些事后令我懊悔的事',
    407: '我通常很镇静，不容易激动',
    408: '我不轻易流露自己的感情，以至于人家伤害了我，他自己还不知道',
    409: '有时我因为承担的事情太多，而使自己精疲力竭',
    410: '我当然乐于以其人之道还治其人之身',
    411: '宗教不使我烦恼',
    412: '我生病或受伤的时候，不怕找医生',
    413: '我有罪，应受重罚',
    414: '我把失望的事看得太重，以至于总忘不了',
    415: '我很不喜欢匆匆忙忙地干工作',
    416: '虽然我明知自己能把事做好，但是我也怕别人看着我做',
    417: '在排队的时候如果有人插到我前面去，我会感到恼火而指责他',
    418: '有时我觉得自己一无是处',
    419: '小时候我时常逃学',
    420: '我曾经有过很不寻常的宗教体验',
    421: '我家里有人很神经过敏',
    422: '我因为家里有的人所从事过的职业而感到不好意思',
    423: '我很喜欢（或者喜欢过）钓鱼',
    424: '我几乎总感到肚子饿',
    425: '我经常做梦',
    426: '有时只好用不客气的态度去对付那些粗鲁或令人厌恶的人',
    427: '我倾向于对各种不同爱好发生兴趣，而不愿意长期坚持其中的某一种',
    428: '我喜欢阅读报纸的社论',
    429: '我喜欢听主题严肃的演说',
    430: '我易受异性的吸引',
    431: '我相当担心那些可能发生的不幸',
    432: '我有着坚定的政治见解',
    433: '我曾经有过想像的同伴',
    434: '我希望能成为一个摩托车运动员',
    435: '我通常喜欢和女性一起工作',
    436: '我确信只有一种宗教是真的',
    437: '只要你不是真正地犯法，钻法律的空子是可以的',
    438: '有些人讨厌极了，我会因为他们自食其果而暗中高兴',
    439: '要我等待，我就紧张',
    440: '当我兴高采烈的时候，见到别人忧郁消沉就使我大为扫兴',
    441: '我喜欢身材高的女人',
    442: '有些时期我因忧虑而失眠',
    443: '假若别人认为我对某些事的做法不妥当的话，我很容易放弃',
    444: '我不想去纠正那些发表愚昧无知见解的人',
    445: '我年轻（童年）的时候，喜欢寻求刺激',
    446: '警察通常是诚实的',
    447: '当别人反对我的意见时，我会不惜一切去说服他',
    448: '在街上、车上或在商店里，如果有人注视我，我会觉得不安',
    449: '我不喜欢看到妇女吸烟',
    450: '我很少有忧郁的毛病',
    451: '如果有人对我所熟悉的事情发表愚蠢和无知的意见，我总是没法纠正他',
    452: '我喜欢开别人的玩笑',
    453: '我小时候，对参加团伙不热心',
    454: '独自住在深山或老林的小木屋里，我也会觉得快乐',
    455: '许多人都说我是急性子',
    456: '如果一个人触犯了一条他认为不合理的法律，他是不应该受到惩罚的',
    457: '我认为一个人决不应该喝酒',
    458: '小时候和我关系密切的人（父亲、继父等）对我十分严厉',
    459: '我有几种坏习惯，已经根深蒂固，难于改正',
    460: '我只适量地喝一点酒（或者一点也不喝）',
    461: '我希望我能摆脱因为破口伤人而引起的烦恼',
    462: '我觉得不能把自己的一切都告诉别人',
    463: '我从前喜欢玩“跳房子”（或跳橡皮筋）的游戏',
    464: '我从来没有见过幻象',
    465: '对于我的终身职业，我已经好几次改变过主意',
    466: '除了医生的嘱咐，我从来不服用任何药物或安眠药',
    467: '我时常默记一些无关紧要的号码（如汽车牌照等）',
    468: '我时常因为自己爱发脾气和爱抱怨而感到懊悔',
    469: '闪电是我害怕的东西中的一种',
    470: '有关性方面的事使我厌恶',
    471: '在学校中老师对我的品行评定总是很不好',
    472: '火对我有一种诱惑力。',
    473: '我喜欢让别人猜测我下一步的活动',
    474: '我的小便次数不比别人多',
    475: '万不得已的时候，我只吐露一些无损于自己的那部分实情',
    476: '我是上帝（神）派来的特使',
    477: '假如我和几个朋友有着同样的过错，我宁可一人承担而不愿连累别人',
    478: '我还从来没有因为家里人惹了事而自己感到特别紧张',
    479: '人与人之间的相互欺骗是我所知道的唯一的奇迹',
    480: '我常常怕黑暗',
    481: '我害怕一个人单独呆在黑暗中',
    482: '我的计划看来总是困难重重，使我不得不一一放弃',
    483: '上帝（神）创造奇迹',
    484: '有些缺点，我只好承认并设法加以控制，但无法消除',
    485: '一个男人和一个女人相处的时候，他通常想到的是关于她的性方面的事',
    486: '我从来没有发现我尿中有血',
    487: '当我试图使别人不犯错误，而做的事被人误解的时候，我往往感到十分难过',
    488: '每星期我祈祷几次',
    489: '我同情那些不能摆脱苦恼和忧愁的人',
    490: '我每星期念几次经',
    491: '对认为世界上只有一种宗教是真的那些人，我感到不耐烦',
    492: '我想起地震就害怕',
    493: '我喜欢那种需要注意力集中的工作，而不喜欢省心（不费劲）的工作',
    494: '我怕自己被关在小房间里或禁闭的小地方',
    495: '对那些我想帮助他们改正或提高的人，我总是坦率地交底',
    496: '我从来没有过将一件东西看成两件（复视现象）',
    497: '我喜欢探险小说',
    498: '坦率永远是一件好事',
    499: '我必须承认，我有时会不合理地担心一些无关紧要的事情',
    500: '我很乐意百分之百的接受一个好意见',
    501: '我一向总是靠自己解决问题，而不是找人教我怎样做',
    502: '风暴使我惊慌',
    503: '我经常不对别人的行动表示强烈的赞成或反对',
    504: '我不想隐瞒我对一个人的坏印象或同情，免得他不知道我对他的看法',
    505: '我认为“不肯拉车的马应该受到鞭打”',
    506: '我是个神经高度紧张的人',
    507: '我经常遇到一些顶头上司，他们把功劳归于自己，把错误推给下级',
    508: '我相信我的嗅觉和别人一样好',
    509: '因为我太拘谨，所以有时我难于坚持自己的正确意见',
    510: '肮脏使我害怕或恶心',
    511: '我有一种不愿告诉别人的梦幻生活',
    512: '我不喜欢洗澡',
    513: '我认为为别人谋求幸福比自己争取自由更为伟大',
    514: '我喜欢有男子气的女人',
    515: '我们家总是不愁吃不愁穿',
    516: '我家里有些人脾气急躁',
    517: '我无论什么事情都做不好',
    518: '我经常感到惭愧，因为我对某些事情想的和做的不一样',
    519: '我的性器官有点毛病',
    520: '我总是强烈地坚持自己的意见',
    521: '我常常向别人请教',
    522: '我不害怕蜘蛛',
    523: '我从来不脸红',
    524: '我不怕从门把上传染上疾病',
    525: '有些动物使我神经紧张',
    526: '我的前途似乎没有希望',
    527: '我家里人和近亲们相处得很好',
    528: '我并不容易比人脸红',
    529: '我喜欢穿高档的衣服',
    530: '我常常担心自己会脸红',
    531: '即使我以为自己对某种事已经打定了主意，别人也很容易使我变卦或改变主意',
    532: '我和别人一样能够忍受同量的痛苦',
    533: '我并不因为常常打嗝（呃逆）而觉得很烦恼',
    534: '有好几次都是我一个人坚持到底，最后才放弃了所做的事',
    535: '我几乎整天感到口干',
    536: '只要有人催我，我就生气',
    537: '我想去深山野林中打老虎',
    538: '我想我会喜欢裁缝的工作',
    539: '我不怕老鼠',
    540: '我的面部从来没有麻痹过',
    541: '我的皮肤似乎对触摸特别敏感',
    542: '我从来没有过像柏油一样的黑粪便',
    543: '每星期我总有几次觉得好像有可怕的事情要发生',
    544: '我大部分时间都感到疲倦',
    545: '有时我一再做同样的梦',
    546: '我喜欢阅读有关历史的书籍',
    547: '未来是变化无常的，一个人很难做出认真的安排',
    548: '如果可以避免的话，我决不去看色情电影',
    549: '许多时候，即使一切顺利，我对任何事情都觉得无所谓',
    550: '我喜欢修理门锁',
    551: '有时我可以肯定别人知道我在想什么',
    552: '我喜欢阅读有关科学的书籍',
    553: '我害怕单独呆在空旷的地方',
    554: '假如我是个画家，我喜欢画小孩子',
    555: '有时我觉得我就要垮了',
    556: '我很注意我的衣着式样',
    557: '我喜欢当一个私人秘书',
    558: '许多人都因为有过不良的性行为而感到惭愧',
    559: '我经常在半夜里受惊吓',
    560: '我经常因为记不清把东西放在哪里而感到苦恼',
    561: '我很喜欢骑马',
    562: '小时候，我最依恋和钦佩的是一个女人（祖母、母亲、姐姐、姑、婶、姨等）',
    563: '我喜欢探险小说胜过爱情小说',
    564: '我不轻易生气',
    565: '当我站在高处的时候，我就很想往下跳',
    566: '我喜欢电影里的爱情镜头'
}


# 用于存放测验的原始结果
# Used to store the original results of the questionnaire
Ans = {

}


def start():
    """
    测验引导部分，含简介和指导语
    Guide section, including abstract and instruction

    :return: None
    """
    print(Ins1)
    time.sleep(1)

    while 1:
        go = '1'
        if go == '1':
            print('-' * 65)
            print('测验将在5秒后正式开始，请仔细阅读并理解以下内容')
            time.sleep(2)
            print(Ins2)
            time.sleep(3)
            break


def answer(i):
    """for debug
    随机答题
    random answer

    :return: '0' or '1'
    :rtype: str
    """
    ans = text_input[i]
    return str(ans)


def test():
    """
    测验部分
    test section

    :return: None
    """
    global Sex
    global Age

    print('测验正式开始！')
    print('-' * 65)
    time.sleep(1)

    while 1:
        print('x1. 我的性别是')
        print('1. 男    0.女')
        Sex = input('> ')
        if Sex == '1' or Sex == '0':
            break
        else:
            print('输入错误请按照测验要求重新输入！')
            continue

    while 1:
        print('-' * 65)
        print('x2. 请输入你的年龄')
        Age = input('> ')
    
        if str.isdigit(Age):
            if 13 <= int(Age) <= 70:
                break
            else:
                print('本测验不适用于该年龄范围，感谢使用！')
                time.sleep(3)
                exit(0)
        else:
            print('输入错误请按照测验要求重新输入！')
            continue

    for i in range(len(Que)+1):
        if i == 73:
            if Sex == '1':
                temp_que = str(i+1) + '. ' + (Que[i+1][Que[i+1].find('m')+1: Que[i+1].find('f')])
            else:
                temp_que = str(i+1) + '. ' + (Que[i+1][Que[i+1].find('f') + 1:])
        elif i == len(Que):
            temp_que = str(len(Que)+1) + '.' + '我保证是在专业人士指导下认真诚实地完成本次测验'
        else:
            temp_que = str(i+1) + '. ' + Que[i+1]

        while 1:
            print('-' * 65)
            print(temp_que)
            print('1. 是    0. 否')
            if FORMAT_INPUT:
                temp_ans = answer(i)
            else:
                temp_ans = input('> ')
            
            #   # for debug
            # print('> ' + str(temp_ans))  # for debug
            if temp_ans == '1' or temp_ans == '0':
                Ans[i+1] = temp_ans
                # print(Ans)  # for debug
                break
            elif temp_ans == 'bomb':    # for debug
                exit(0)
            else:
                print('输入错误请按照测验要求重新输入！')
                continue

    print('-' * 65)
    print('测验结束，感谢您的配合！')
    print('-' * 65)


def is_diff(a, b):
    """
    为异计分
    Add point if different

    :param a: the first para
    :param b: the second para
    :return: 0 or 1

    :type a: str
    :type b: str
    :rtype: int
    """
    if a != b:
        return 1
    else:
        return 0


def is_true(t):
    """
    正向计分
    Add point if True

    :param t: the para under test
    :return: 0 or 1

    :type t: str
    :rtype: int
    """
    if t == '1':
        return 1
    else:
        return 0


def is_false(t):
    """
    反向计分
    Add point if False

    :param t: the para under test
    :return: 0 or 1

    :type t: str
    :rtype: 0 or 1
    """
    if t == '0':
        return 1
    else:
        return 0


def norm_select(sex):
    """
    选择常模表（中国1982版）
    the norm select (based on Chinese 1982's)

    :param sex: the subjects' sex
    :return: Norm_M, Norm_SD

    :type sex: str
    :rtype: None
    """
    global Norm_M
    global Norm_SD

    # 男性常模
    # male norm
    if sex == '1':
        Norm_M = {
            'L': 5.70,
            'F': 13.68,
            'K': 13.00,
            'Hs': 8.78,
            'D': 26.16,
            'Hy': 22.07,
            'Pd': 18.98,
            'Mf': 27.56,
            'Pa': 12.84,
            'Pt': 17.86,
            'Sc': 23.01,
            'Ma': 18.48,
            'Si': 34.51,
            'Hs+0.5K': 15.42,
            'Pd+0.4K': 24.38,
            'Pt+1.0K': 31.14,
            'Sc+1.0K': 36.47,
            'Ma+0.2K': 21.22,
            'Mas': 18.86,
            'Dy': 26.09,
            'Do': 15.39,
            'Re': 20.54,
            'Cn': 25.26
        }
        Norm_SD = {
            'L': 2.52,
            'F': 6.86,
            'K': 4.66,
            'Hs': 4.75,
            'D': 4.97,
            'Hy': 5.36,
            'Pd': 4.36,
            'Mf': 4.04,
            'Pa': 3.92,
            'Pt': 7.93,
            'Sc': 10.15,
            'Ma': 5.26,
            'Si': 6.88,
            'Hs+0.5K': 4.79,
            'Pd+0.4K': 4.27,
            'Pt+1.0K': 5.71,
            'Sc+1.0K': 8.24,
            'Ma+0.2K': 4.88,
            'Mas': 7.45,
            'Dy': 8.05,
            'Do': 3.12,
            'Re': 4.13,
            'Cn': 3.76
        }
    # 女性常模
    # female norm
    else:
        Norm_M = {
            'L': 5.64,
            'F': 11.69,
            'K': 12.25,
            'Hs': 9.83,
            'D': 28.40,
            'Hy': 22.82,
            'Pd': 18.29,
            'Mf': 31.83,
            'Pa': 12.62,
            'Pt': 18.77,
            'Sc': 22.50,
            'Ma': 16.64,
            'Si': 37.27,
            'Hs+0.5K': 16.35,
            'Pd+0.4K': 23.33,
            'Pt+1.0K': 31.17,
            'Sc+1.0K': 34.89,
            'Ma+0.2K': 19.18,
            'Mas': 20.43,
            'Dy': 29.12,
            'Do': 15.10,
            'Re': 21.78,
            'Cn': 24.86
        }
        Norm_SD = {
            'L': 2.48,
            'F': 5.02,
            'K': 4.26,
            'Hs': 4.98,
            'D': 5.04,
            'Hy': 5.54,
            'Pd': 4.45,
            'Mf': 3.86,
            'Pa': 3.93,
            'Pt': 7.82,
            'Sc': 9.57,
            'Ma': 5.16,
            'Si': 6.71,
            'Hs+0.5K': 4.95,
            'Pd+0.4K': 4.44,
            'Pt+1.0K': 5.86,
            'Sc+1.0K': 7.63,
            'Ma+0.2K': 4.89,
            'Mas': 7.35,
            'Dy': 7.61,
            'Do': 2.76,
            'Re': 3.13,
            'Cn': 3.70
        }



def trans_t(score, m, sd):
    """
    标准T分计算公式
    Standard T point conversion formula

    :param score: original score
    :param m: normative mean value
    :param sd: normative standard deviation
    :return: standard T score

    :type score: int
    :type m: float
    :type sd: float
    :rtype: int
    """
    t = round(50 + 10*(score - m)/sd)
    return t


def scale_q(ori_score=0, pro_score=0):
    """
    效度量表-疑问分数 Q
    the score of Q (? or question) scale,

    由于不允许被试者存在空题，故仅记录16项重复问题的矛盾数量
    because subjects were not allowed to have blank questions,gh repo clone Bright476/MMPI_Test
    just record the number of contradictions of 16 repeated questions

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    # 原始分 original score
    temp1 = [8, 13, 15, 16, 20, 21, 22, 23, 24, 32, 33, 35, 37, 38, 305, 317]
    temp2 = [318, 290, 314, 315, 310, 308, 326, 288, 333, 328, 323, 331, 302, 311, 366, 362]

    for i in range(len(temp1)):
        ori_score += is_diff(Ans[temp1[i]], Ans[temp2[i]])

    temp = ori_score
    pro_score += temp

    return ori_score, pro_score


def scale_l(ori_score=0, pro_score=0):
    """
    效度量表-说谎分数 L
    the score of L (lie) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    # 原始分 original score
    temp = [15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 195, 225, 255, 285]

    for i in temp:
        ori_score += is_false(Ans[i])

    pro_score += trans_t(ori_score, Norm_M['L'], Norm_SD['L'])

    return ori_score, pro_score


def scale_f(ori_score=0, pro_score=0):
    """
    效度量表-诈病分数 F
    the score of F (infrequency or fake bad) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    # 原始分 original score
    temp_t = [14, 27, 31, 34, 35, 40, 42, 48, 49, 50, 53, 56, 66, 85, 121, 123, 139, 146, 151, 156, 168, 184, 197, 200,
              202, 205, 206, 209, 210, 211, 215, 218, 227, 245, 246, 247, 252, 256, 269, 275, 286, 288, 291, 293]
    temp_f = [17, 20, 54, 65, 75, 83, 112, 113, 115, 164, 169, 177, 185, 196, 199, 220, 257, 258, 272, 276]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    pro_score += trans_t(ori_score, Norm_M['F'], Norm_SD['F'])

    return ori_score, pro_score


def scale_k(ori_score=0, pro_score=0):
    """
    效度量表-校正分数 K
    the score of K (defensiveness) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    temp_t = [96]
    temp_f = [30, 39, 71, 89, 124, 129, 134, 138, 142, 148, 160, 170, 171, 180, 183, 217, 234, 267, 272, 296, 316, 322,
              368, 370, 372, 373, 375, 386, 394]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    pro_score += trans_t(ori_score, Norm_M['K'], Norm_SD['K'])

    return ori_score, pro_score


def scale_hs(ori_score=0, pro_score=0, pro_score_add_k=0):
    """
    临床量表-1 疑病 Hs
    the score of Hs (hypochondriasis) scale

    :param ori_score: original score
    :param pro_score: processing score
    :param pro_score_add_k: processing score added 0.5K
    :return: ori_score, pro_score, pro_score_add_k

    :rtype: int, int, int
    """
    temp_t = [23, 29, 43, 62, 72, 108, 114, 125, 161, 189, 273]
    temp_f = [2, 3, 7, 9, 18, 51, 55, 63, 68, 103, 130, 153, 155, 163, 175, 188, 190, 192, 230, 243, 274, 281]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    k, ignore = scale_k()
    pro_score += trans_t(ori_score, Norm_M['Hs'], Norm_SD['Hs'])
    pro_score_add_k += trans_t(ori_score + round(0.5 * k), Norm_M['Hs+0.5K'], Norm_SD['Hs+0.5K'])

    return ori_score, pro_score, pro_score_add_k


def scale_d(ori_score=0, pro_score=0):
    """
    临床量表-2 抑郁 D
    the score of D (depression) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    temp_t = [5, 32, 41, 43, 52, 67, 86, 104, 130, 138, 142, 158, 159, 182, 189, 193, 236, 259, 288, 290]
    temp_f = [2, 8, 9, 18, 30, 36, 39, 46, 51, 57, 58, 64, 80, 88, 89, 95, 98, 107, 122, 131, 145, 152, 153, 154, 155,
              160, 178, 191, 207, 208, 233, 241, 242, 248, 263, 270, 271, 272, 285, 296]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    pro_score += trans_t(ori_score, Norm_M['D'], Norm_SD['D'])

    return ori_score, pro_score


def scale_hy(ori_score=0, pro_score=0):
    """
    临床量表-3 癔病 Hy
    the score of Hy (hysteria) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    temp_t = [10, 23, 32, 43, 44, 47, 76, 114, 179, 186, 189, 238, 253]
    temp_f = [2, 3, 6, 7, 8, 9, 12, 26, 30, 51, 55, 71, 89, 93, 103, 107, 109, 124, 128, 129, 136, 137, 141, 147, 153,
              160, 162, 163, 170, 172, 174, 175, 180, 188, 190, 192, 201, 213, 230, 234, 243, 265, 267, 274, 279, 289,
              292]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    pro_score += trans_t(ori_score, Norm_M['Hy'], Norm_SD['Hy'])

    return ori_score, pro_score


def scale_pd(ori_score=0, pro_score=0, pro_score_add_k=0):
    """
    临床量表-4 精神病态 Pd
    the score of Pd (psychopathic deviate) scale

    :param ori_score: original score
    :param pro_score: processing score
    :param pro_score_add_k: processing score added 0.4K
    :return: ori_score, pro_score, pro_score_add_k

    :rtype: int, int, int
    """
    temp_t = [16, 21, 24, 32, 33, 35, 38, 42, 61, 67, 84, 94, 102, 106, 110, 118, 127, 215, 216, 224, 239, 244, 245,
              284]
    temp_f = [8, 20, 37, 82, 91, 96, 107, 134, 137, 141, 155, 170, 171, 173, 180, 183, 201, 231, 235, 237, 248, 267,
              287, 289, 294, 296]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    k, ignore = scale_k()
    pro_score += trans_t(ori_score, Norm_M['Pd'], Norm_SD['Pd'])
    pro_score_add_k += trans_t(ori_score + round(0.4 * k), Norm_M['Pd+0.4K'], Norm_SD['Pd+0.4K'])

    return ori_score, pro_score, pro_score_add_k


def scale_mf(ori_score=0, pro_score=0):
    """
    临床量表-5 男子气/女子气 Mf
    the score of Mf (masculinity-femininity) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    # 男性女性化 Mf-m
    if Sex == '1':
        temp_t = [4, 25, 69, 70, 74, 77, 78, 87, 92, 126, 132, 134, 140, 149, 179, 187, 203, 204, 217, 226, 231, 239,
                  261, 278, 282, 295, 297, 299]
        temp_f = [1, 19, 26, 28, 79, 80, 81, 89, 99, 112, 115, 116, 117, 120, 133, 144, 176, 198, 213, 214, 219, 221,
                  223, 229, 249, 254, 260, 262, 264, 280, 283, 300]
    # 女性男性化 Mf-f
    else:
        temp_t = [4, 25, 70, 74, 77, 78, 87, 92, 126, 132, 133, 134, 140, 149, 187, 203, 204, 217, 226, 239, 261, 278,
                  282, 295, 299]
        temp_f = [1, 19, 26, 28, 69, 79, 80, 81, 89, 99, 112, 115, 116, 117, 120, 144, 176, 179, 198, 213, 214, 219,
                  221, 223, 229, 231, 249, 254, 260, 262, 264, 280, 283, 297, 300]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    pro_score += trans_t(ori_score, Norm_M['Mf'], Norm_SD['Mf'])

    return ori_score, pro_score


def scale_pa(ori_score=0, pro_score=0):
    """
    临床量表-6 妄想狂 Pa
    the score of Pa (paranoia) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    temp_t = [16, 24, 27, 35, 110, 121, 123, 127, 151, 157, 158, 202, 275, 284, 291, 293, 299, 305, 314, 317, 326, 338,
              341, 364, 365]
    temp_f = [93, 107, 109, 111, 117, 124, 268, 281, 294, 313, 316, 319, 327, 347, 348]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    pro_score += trans_t(ori_score, Norm_M['Pa'], Norm_SD['Pa'])

    return ori_score, pro_score


def scale_pt(ori_score=0, pro_score=0, pro_score_add_k=0):
    """
    临床量表-7 精神衰弱 Pt
    the score of Pt (psychasthenia) scale

    :param ori_score: original score
    :param pro_score: processing score
    :param pro_score_add_k: processing score added 1.0K
    :return: ori_score, pro_score, pro_score_add_k

    :rtype: int, int, int
    """
    temp_t = [10, 15, 22, 32, 41, 67, 76, 86, 94, 102, 106, 142, 159, 182, 189, 217, 238, 266, 301, 304, 321, 336, 337,
              340, 342, 343, 344, 346, 349, 351, 352, 356, 357, 358, 359, 360, 361, 362, 366]
    temp_f = [3, 8, 36, 122, 152, 164, 178, 329, 353]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    k, ignore = scale_k()
    pro_score += trans_t(ori_score, Norm_M['Pt'], Norm_SD['Pt'])
    pro_score_add_k += trans_t(ori_score + k, Norm_M['Pt+1.0K'], Norm_SD['Pt+1.0K'])

    return ori_score, pro_score, pro_score_add_k


def scale_sc(ori_score=0, pro_score=0, pro_score_add_k=0):
    """
    临床量表-8 精神分裂症 Sc
    the score of Sc (schizophrenia) scale

    :param ori_score: original score
    :param pro_score: processing score
    :param pro_score_add_k: processing score added 1.0K
    :return: ori_score, pro_score, pro_score_add_k

    :rtype: int, int, int
    """
    temp_t = [15, 22, 40, 41, 47, 52, 76, 97, 104, 121, 156, 157, 159, 168, 179, 182, 194, 202, 210, 212, 238, 241, 251,
              259, 266, 273, 282, 291, 297, 301, 303, 307, 308, 311, 312, 315, 320, 323, 324, 325, 328, 331, 332, 333,
              334, 335, 339, 341, 345, 349, 350, 352, 354, 355, 356, 360, 363, 364, 366]
    temp_f = [17, 65, 103, 119, 177, 178, 187, 192, 196, 220, 276, 281, 302, 306, 309, 310, 318, 322, 330]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    k, ignore = scale_k()
    pro_score += trans_t(ori_score, Norm_M['Sc'], Norm_SD['Sc'])
    pro_score_add_k += trans_t(ori_score + k, Norm_M['Sc+1.0K'], Norm_SD['Sc+1.0K'])

    return ori_score, pro_score, pro_score_add_k


def scale_ma(ori_score=0, pro_score=0, pro_score_add_k=0):
    """
    临床量表-9 轻躁狂 Ma
    the score of Ma (hypomania) scale

    :param ori_score: original score
    :param pro_score: processing score
    :param pro_score_add_k: processing score added 0.2K
    :return: ori_score, pro_score, pro_score_add_k

    :rtype: int, int, int
    """
    temp_t = [11, 13, 21, 22, 59, 64, 73, 97, 100, 109, 127, 134, 143, 156, 157, 167, 181, 194, 212, 222, 226, 228, 232,
              233, 238, 240, 250, 251, 263, 266, 268, 271, 277, 279, 298]
    temp_f = [101, 105, 111, 119, 120, 148, 166, 171, 180, 267, 289]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    k, ignore = scale_k()
    pro_score += trans_t(ori_score, Norm_M['Ma'], Norm_SD['Ma'])
    pro_score_add_k += trans_t(ori_score + round(0.2 * k), Norm_M['Ma+0.2K'], Norm_SD['Ma+0.2K'])

    return ori_score, pro_score, pro_score_add_k


def scale_si(ori_score=0, pro_score=0):
    """
    临床量表-0 社会内向性 Si
    the score of Si (social introversion) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    temp_t = [32, 67, 82, 111, 117, 124, 138, 147, 171, 172, 180, 201, 236, 267, 278, 292, 304, 316, 321, 332, 336, 342,
              357, 369, 370, 373, 376, 378, 379, 385, 389, 393, 398, 399]
    temp_f = [25, 33, 57, 91, 99, 110, 126, 143, 193, 208, 229, 231, 254, 262, 281, 296, 309, 353, 359, 367, 371, 374,
              377, 380, 381, 382, 383, 384, 387, 388, 390, 391, 392, 395, 396, 397]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    pro_score += trans_t(ori_score, Norm_M['Si'], Norm_SD['Si'])

    return ori_score, pro_score


def scale_mas(ori_score=0, pro_score=0):
    """
    附加量表- 外显性焦虑 Mas
    the score of Mas (Manifest anxiety) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    temp_t = [13, 14, 23, 31, 32, 43, 67, 86, 125, 142, 158, 186, 191, 217, 238, 241, 263, 301, 317, 321, 322, 335, 337,
              340, 352, 361, 372, 398, 418, 424, 431, 439, 442, 499, 506, 530, 555]
    temp_f = [7, 18, 107, 163, 190, 230, 242, 264, 287, 367, 407, 520, 528]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    pro_score += trans_t(ori_score, Norm_M['Mas'], Norm_SD['Mas'])

    return ori_score, pro_score


def scale_dy(ori_score=0, pro_score=0):
    """
    附加量表- 依赖性 Dy
    the score of Dy (Dependency) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    temp_t = [19, 21, 24, 41, 63, 67, 70, 82, 86, 98, 100, 138, 141, 158, 165, 180, 189, 201, 212, 236, 239, 259, 267,
              304, 305, 321, 337, 338, 343, 357, 361, 362, 370, 372, 373, 393, 398, 399, 408, 440, 443, 461, 487, 488,
              489, 509, 521, 531, 554]
    temp_f = [9, 79, 107, 163, 170, 193, 264, 411]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    pro_score += trans_t(ori_score, Norm_M['Dy'], Norm_SD['Dy'])

    return ori_score, pro_score


def scale_do(ori_score=0, pro_score=0):
    """
    附加量表- 支配性 Do
    the score of Do (Dominance) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    temp_t = [64, 229, 255, 270, 406, 432, 523]
    temp_f = [32, 61, 82, 86, 94, 186, 223, 224, 240, 249, 250, 267, 268, 304, 343, 356, 419, 483, 547, 558, 562]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    pro_score += trans_t(ori_score, Norm_M['Do'], Norm_SD['Do'])

    return ori_score, pro_score


def scale_re(ori_score=0, pro_score=0):
    """
    附加量表- 社会责任感 Re
    the score of Re (Social Responsibility) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    temp_t = [58, 111, 173, 221, 294, 412, 501, 552]
    temp_f = [6, 28, 30, 33, 56, 116, 118, 157, 175, 181, 223, 224, 260, 304, 388, 419, 434, 437, 468, 471, 472, 529,
              553, 558]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    pro_score += trans_t(ori_score, Norm_M['Re'], Norm_SD['Re'])

    return ori_score, pro_score


def scale_cn(ori_score=0, pro_score=0):
    """
    附加量表- 控制 Cn
    the score of Cn (Control) scale

    :param ori_score: original score
    :param pro_score: processing score
    :return: ori_score, pro_score

    :rtype: int, int
    """
    temp_t = [6, 20, 30, 56, 67, 105, 116, 134, 145, 162, 169, 181, 225, 236, 238, 285, 296, 319, 337, 376, 379, 381,
              418, 447, 460, 461, 529, 555]
    temp_f = [58, 80, 92, 96, 111, 167, 174, 220, 242, 249, 250, 291, 313, 360, 439, 444, 449, 483, 488, 489, 527, 548]

    for i in temp_t:
        ori_score += is_true(Ans[i])
    for j in temp_f:
        ori_score += is_false(Ans[j])

    pro_score += trans_t(ori_score, Norm_M['Cn'], Norm_SD['Cn'])

    return ori_score, pro_score


def calculate_score():
    """
    测验分数计算
    calculate the score

    :return: None
    """
    global ori_Point
    global pro_Point

    ori_Point = {

    }
    pro_Point = {

    }

    norm_select(Sex)

    ori_Point['Q*'], pro_Point['Q*'] = scale_q()
    ori_Point['L'], pro_Point['L'] = scale_l()
    ori_Point['F'], pro_Point['F'] = scale_f()
    ori_Point['K'], pro_Point['K'] = scale_k()
    ori_Point['Hs'], pro_Point['Hs'], pro_Point['Hs+0.5K'] = scale_hs()
    ori_Point['D'], pro_Point['D'] = scale_d()
    ori_Point['Hy'], pro_Point['Hy'] = scale_hy()
    ori_Point['Pd'], pro_Point['Pd'], pro_Point['Pd+0.4K'] = scale_pd()
    ori_Point['Mf'], pro_Point['Mf'] = scale_mf()
    ori_Point['Pa'], pro_Point['Pa'] = scale_pa()
    ori_Point['Pt'], pro_Point['Pt'], pro_Point['Pt+1.0K'] = scale_pt()
    ori_Point['Sc'], pro_Point['Sc'], pro_Point['Sc+1.0K'] = scale_sc()
    ori_Point['Ma'], pro_Point['Ma'], pro_Point['Ma+0.2K'] = scale_ma()
    ori_Point['Si'], pro_Point['Si'] = scale_si()
    ori_Point['Mas'], pro_Point['Mas'] = scale_mas()
    ori_Point['Dy'], pro_Point['Dy'] = scale_dy()
    ori_Point['Do'], pro_Point['Do'] = scale_do()
    ori_Point['Re'], pro_Point['Re'] = scale_re()
    ori_Point['Cn'], pro_Point['Cn'] = scale_cn()


def analyze_score():
    """
    分析测验分数
    analyze the score of test

    利用两点编码法以及剖析图方式呈现被测者的人格特点
    Use 2 point codes and personality profile to show the personality traits of the subjects

    :return:None
    """
    global two_point

    val_scale = ['L', 'F', 'K']
    cli_scale = ['Hs\n1', 'D\n2', 'Hy\n3', 'Pd\n4', 'Mf\n5', 'Pa\n6', 'Pt\n7', 'Sc\n8', 'Ma\n9', 'Si\n0']
    ext_scale = ['Mas', 'Dy', 'Do', 'Re', 'Cn']

    val_list = [
        pro_Point['L'],
        pro_Point['F'],
        pro_Point['K']
    ]
    cli_list = [
        pro_Point['Hs+0.5K'],
        pro_Point['D'],
        pro_Point['Hy'],
        pro_Point['Pd+0.4K'],
        pro_Point['Mf'],
        pro_Point['Pa'],
        pro_Point['Pt+1.0K'],
        pro_Point['Sc+1.0K'],
        pro_Point['Ma+0.2K'],
        pro_Point['Si']
    ]
    ext_list = [
        pro_Point['Mas'],
        pro_Point['Dy'],
        pro_Point['Do'],
        pro_Point['Re'],
        pro_Point['Cn']
    ]

    cli_max1 = max(cli_list)
    cli_max1_index = cli_list.index(cli_max1)
    if cli_max1_index != 9:
        first = cli_max1_index + 1
    else:
        first = 0
    cli_list[cli_max1_index] = 0
    cli_max2 = max(cli_list)
    cli_max2_index = cli_list.index(cli_max2)
    if cli_max2_index != 9:
        second = cli_max2_index + 1
    else:
        second = 0
    cli_list[cli_max1_index] = cli_max1
    two_point = '%s%s' % (str(first), str(second))

    plt.rcParams['font.sans-serif'] = ['DejaVu Sans']
    plt.rcParams['axes.unicode_minus'] = False
    fig = plt.figure(figsize=(10, 6), dpi=100, linewidth=1)
    ax = fig.add_subplot(111)
    ax.plot(range(len(val_list)), val_list, 'b*-')
    ax.plot(range(len(val_list), len(val_list) + len(cli_list)), cli_list, 'b*-')
    ax.plot(range(len(val_list) + len(cli_list), len(val_list) + len(cli_list) + len(ext_list)), ext_list, 'b*-')
    # plt.setp(ax.xaxis.get_majorticklabels(), rotation=-45)
    ax.set_xticks(range(len(val_list + cli_list + ext_list)))
    ax.set_xticklabels(val_scale + cli_scale + ext_scale)
    ax.set_yticks([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140])
    ax.set_xlim(-0.5, len(val_scale + cli_scale + ext_scale) - 0.5)
    ax.set_ylim(0, 140)
    plt.axvline(2.5, ls="-", color="black")
    plt.axvline(12.5, ls="-", color="black")
    plt.axvline(7, ls="--", color="red")
    plt.axhline(50, ls="-", color="black")
    plt.axhline(60, ls="--", color="black")
    plt.axhline(70, ls="-", color="black")
    ax.plot(cli_max1_index + len(val_list), cli_max1, 'rp')
    ax.plot(cli_max2_index + len(val_list), cli_max2, 'rp')
    plt.annotate(r'$max1$', xy=(cli_max1_index + len(val_list)+0.1, cli_max1+2), color='red', fontsize=8)
    plt.annotate(r'$max2$', xy=(cli_max2_index + len(val_list)+0.1, cli_max2+2), color='red', fontsize=8)


def data_export():
    """
    导出数据
    export test data

    :return: None

    Note: Generate a '.xlsx' file to save the test information
    """
    print('请输入被试者姓名，请不要输入中文')
    name = input('> ')
    wb = Workbook()
    data_filename = time.strftime("%Y%m%d_%H%M_", time.localtime()) + name + '_MMPI测验'

    font1 = Font(name='黑体', size=12)
    font2 = Font(name='宋体', size=12)
    font3 = Font(name='Times New Roman', size=12, bold=True)
    font4 = Font(name='Times New Roman', size=12)
    alig1 = Alignment(horizontal='center', vertical='center')
    alig2 = Alignment(horizontal='general', vertical='center')

    # 表1，记录测验原始数据
    sheet1 = wb.active
    sheet1.title = '测验原始数据'
    sheet1['A1'] = '姓名'
    sheet1['A1'].font = font1
    sheet1['A1'].alignment = alig1
    sheet1['C1'] = '性别'
    sheet1['C1'].font = font1
    sheet1['C1'].alignment = alig1
    sheet1['E1'] = '年龄'
    sheet1['E1'].font = font1
    sheet1['E1'].alignment = alig1
    sheet1.merge_cells('A2:B2')
    sheet1['A2'] = '题 目'
    sheet1['A2'].font = font1
    sheet1['A2'].alignment = alig1
    sheet1.merge_cells('C2:D2')
    sheet1['C2'] = '回 答'
    sheet1['C2'].font = font1
    sheet1['C2'].alignment = alig1
    sheet1['B1'] = name
    sheet1['B1'].font = font2
    sheet1['B1'].alignment = alig1
    if Sex == '1':
        sex_name = '男'
    else:
        sex_name = '女'
    sheet1['D1'] = sex_name
    sheet1['D1'].font = font2
    sheet1['D1'].alignment = alig1
    sheet1['F1'] = Age
    sheet1['F1'].font = font4
    sheet1['F1'].alignment = alig1
    for i in range(len(Que)+1):
        if i == 73:
            if Sex == '1':
                temp_que = Que[i+1][Que[i+1].find('m')+1: Que[i+1].find('f')]
            else:
                temp_que = Que[i+1][Que[i+1].find('f') + 1:]
        elif i == len(Que):
            temp_que = '我保证是在专业人士指导下认真诚实地完成本次测验'
        else:
            temp_que = Que[i+1]

        sheet1['A%d' % (i + 3)].value = str(i + 1) + '.'
        sheet1['A%d' % (i + 3)].font = font2
        sheet1['A%d' % (i + 3)].alignment = alig1
        sheet1['B%d' % (i + 3)].value = temp_que
        sheet1['B%d' % (i + 3)].font = font2
        sheet1['B%d' % (i + 3)].alignment = alig2
        if Ans[i+1] == '1':
            temp_ans = '是'
            sheet1['C%d' % (i + 3)].value = temp_ans
            sheet1['C%d' % (i + 3)].font = font2
            sheet1['C%d' % (i + 3)].alignment = alig1
        else:
            temp_ans = '否'
            sheet1['D%d' % (i + 3)].value = temp_ans
            sheet1['D%d' % (i + 3)].font = font2
            sheet1['D%d' % (i + 3)].alignment = alig1

    # 表2，记录测验分数
    sheet2 = wb.create_sheet(title='测验分数')
    sheet2['A1'] = '姓名'
    sheet2['A1'].font = font1
    sheet2['A1'].alignment = alig1
    sheet2['C1'] = '性别'
    sheet2['C1'].font = font1
    sheet2['C1'].alignment = alig1
    sheet2['E1'] = '年龄'
    sheet2['E1'].font = font1
    sheet2['E1'].alignment = alig1
    sheet2['B1'].value = name
    sheet2['B1'].font = font2
    sheet2['B1'].alignment = alig1
    sheet2['D1'].value = sex_name
    sheet2['D1'].font = font2
    sheet2['D1'].alignment = alig1
    sheet2['F1'].value = Age
    sheet2['F1'].font = font4
    sheet2['F1'].alignment = alig1
    sheet2['A2'] = '量表类别'
    sheet2['A2'].font = font1
    sheet2['A2'].alignment = alig1
    sheet2['B2'] = '原始分'
    sheet2['B2'].font = font1
    sheet2['B2'].alignment = alig1
    sheet2['C2'] = '标准分（不加K）'
    sheet2['C2'].font = font1
    sheet2['C2'].alignment = alig1
    sheet2['D2'] = '标准分（加K）'
    sheet2['D2'].font = font1
    sheet2['D2'].alignment = alig1
    sheet2['A3'] = '*其中Q量表仅记录矛盾题的数量'
    sheet2['A3'].font = font2
    sheet2['A3'].alignment = alig2
    scale_list = ['Q*', 'L', 'F', 'K', 'Hs', 'D', 'Hy', 'Pd', 'Mf', 'Pa', 'Pt', 'Sc', 'Ma', 'Si',
                  'Mas', 'Dy', 'Do', 'Re', 'Cn']
    for i in range(len(scale_list)):
        sheet2['A%d' % (i+4)].value = scale_list[i]
        sheet2['A%d' % (i+4)].font = font3
        sheet2['A%d' % (i+4)].alignment = alig1
        sheet2['B%d' % (i+4)].value = ori_Point[scale_list[i]]
        sheet2['B%d' % (i+4)].font = font4
        sheet2['B%d' % (i+4)].alignment = alig1
        sheet2['C%d' % (i+4)].value = pro_Point[scale_list[i]]
        sheet2['C%d' % (i+4)].font = font4
        sheet2['C%d' % (i+4)].alignment = alig1
        if scale_list[i] == 'Hs':
            sheet2['D%d' % (i + 4)].value = pro_Point['Hs+0.5K']
            sheet2['D%d' % (i + 4)].font = font4
            sheet2['D%d' % (i + 4)].alignment = alig1
        elif scale_list[i] == 'Pd':
            sheet2['D%d' % (i + 4)].value = pro_Point['Pd+0.4K']
            sheet2['D%d' % (i + 4)].font = font4
            sheet2['D%d' % (i + 4)].alignment = alig1
        elif scale_list[i] == 'Pt':
            sheet2['D%d' % (i + 4)].value = pro_Point['Pt+1.0K']
            sheet2['D%d' % (i + 4)].font = font4
            sheet2['D%d' % (i + 4)].alignment = alig1
        elif scale_list[i] == 'Sc':
            sheet2['D%d' % (i + 4)].value = pro_Point['Sc+1.0K']
            sheet2['D%d' % (i + 4)].font = font4
            sheet2['D%d' % (i + 4)].alignment = alig1
        elif scale_list[i] == 'Ma':
            sheet2['D%d' % (i + 4)].value = pro_Point['Ma+0.2K']
            sheet2['D%d' % (i + 4)].font = font4
            sheet2['D%d' % (i + 4)].alignment = alig1
        else:
            pass
    sheet2['E2'] = '两点编码'
    sheet2['E2'].font = font1
    sheet2['E2'].alignment = alig1
    sheet2['F2'].value = two_point
    sheet2['F2'].font = font4
    sheet2['F2'].alignment = alig1

    wb.save(filename=data_filename + '.xlsx')
    plt.title('%s MMPI Add K score to matrix T score (Chinese norm)' % name)
    plt.savefig(data_filename)
